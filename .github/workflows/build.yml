name: Build and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - '.github/workflows/build.yml'

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: springboot-image-app
  CONTAINER_NAME: ImageApp-Container
  TASK_DEFINITION_FAMILY: ImageApp-Task
  CLUSTER_NAME: ImageApp-Cluster
  SERVICE_NAME: ImageApp-Service

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deploy

      - name: Verify role permissions
        run: |
          # Verify the role can pass the ECS task execution role
          aws iam simulate-principal-policy \
            --policy-source-arn ${{ secrets.AWS_ROLE_ARN }} \
            --action-names "iam:PassRole" \
            --resource-arns "arn:aws:iam::767828749690:role/ImageApp-ECSTaskExecutionRole"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate image tags
        id: meta
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TIMESTAMP: ${{ steps.meta.outputs.timestamp }}
          SHORT_SHA: ${{ steps.meta.outputs.short-sha }}
          COMMIT_SHA: ${{ steps.meta.outputs.commit-sha }}
        run: |
          docker build -t temp-image .
          docker tag temp-image $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag temp-image $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA
          docker tag temp-image $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
          docker tag temp-image $ECR_REGISTRY/$ECR_REPOSITORY:build-$TIMESTAMP
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:build-$TIMESTAMP
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Create new task definition
        id: create-task-def
        env:
          NEW_IMAGE: ${{ steps.build-image.outputs.image }}
        run: |
          # Get current task definition
          CURRENT_TASK_DEF=$(aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_FAMILY }} --query 'taskDefinition')
          
          # Create new task definition with updated image
          echo "$CURRENT_TASK_DEF" | \
            jq --arg IMAGE "$NEW_IMAGE" '.containerDefinitions[0].image = $IMAGE' | \
            jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            > new-task-definition.json
          
          echo "task-def-file=new-task-definition.json" >> $GITHUB_OUTPUT

      - name: Register new task definition
        id: register-task-def
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ steps.create-task-def.outputs.task-def-file }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          echo "task-definition-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service
        id: deploy-service
        run: |
          aws ecs update-service \
            --cluster ${{ env.CLUSTER_NAME }} \
            --service ${{ env.SERVICE_NAME }} \
            --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }} \
            --force-new-deployment

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster ${{ env.CLUSTER_NAME }} \
            --services ${{ env.SERVICE_NAME }}