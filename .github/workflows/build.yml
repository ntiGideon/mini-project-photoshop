name: Build and Blue/Green Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - '.github/workflows/build.yml'
      - 'task-definition.json'
      - 'appspec.yml'

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: springboot-image-app
  CONTAINER_NAME: ImageApp-Container
  TASK_DEFINITION_FAMILY: ImageApp-Task
  CLUSTER_NAME: ImageApp-Cluster
  SERVICE_NAME: ImageApp-Service
  CODEDEPLOY_APP: ImageApp-Deploy
  CODEDEPLOY_GROUP: ImageApp-DG
  S3_BUCKET: fotografi-app  # Replace with your S3 bucket name

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate image tags
        id: meta
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "short-sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TIMESTAMP: ${{ steps.meta.outputs.timestamp }}
          SHORT_SHA: ${{ steps.meta.outputs.short-sha }}
          COMMIT_SHA: ${{ steps.meta.outputs.commit-sha }}
        run: |
          docker build -t temp-image .
          docker tag temp-image $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag temp-image $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA
          docker tag temp-image $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
          docker tag temp-image $ECR_REGISTRY/$ECR_REPOSITORY:build-$TIMESTAMP
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:build-$TIMESTAMP
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Update task definition with new image
        id: update-task-def
        run: |
          # Update the existing task-definition.json with new image
          jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
            '.containerDefinitions[0].image = $IMAGE' \
            task-definition.json > updated-task-definition.json
          mv updated-task-definition.json task-definition.json

      - name: Upload config files to S3
        run: |
          aws s3 cp task-definition.json s3://${{ env.S3_BUCKET }}/task-definition.json
          aws s3 cp appspec.yml s3://${{ env.S3_BUCKET }}/appspec.yml

      - name: Register task definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task-definition-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Create CodeDeploy Deployment
        id: codedeploy
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APP }} \
            --deployment-group-name ${{ env.CODEDEPLOY_GROUP }} \
            --revision '{
              "revisionType": "AppSpecContent",
              "appSpecContent": {
                "content": "file://appspec.yml"
              }
            }' \
            --query 'deploymentId' \
            --output text)
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      - name: Wait for Deployment Success
        run: |
          aws deploy wait deployment-successful \
            --deployment-id ${{ steps.codedeploy.outputs.deployment-id }}