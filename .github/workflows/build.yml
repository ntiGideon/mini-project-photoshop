name: Build and Async Deploy Spring Boot App

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'pom.xml'
      - 'Dockerfile'
      - '.github/workflows/build.yml'
      - 'appspec.yml'

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: springboot-image-app
  ECS_CLUSTER: ImageApp-Cluster
  ECS_SERVICE: ImageApp-Service
  ECS_TASK_DEFINITION: ImageApp-Task
  CONTAINER_NAME: ImageApp-Container
  CODEDEPLOY_APPLICATION: ImageApp-App
  CODEDEPLOY_DEPLOYMENT_GROUP: ImageApp-App
  S3_BUCKET: image-app-codedeploy-artifacts
  HEALTH_CHECK_PATH: /actuator/health
  SPRING_PROFILES_ACTIVE: production

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and test with Maven
        run: mvn clean verify

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-uri: ${{ steps.build-image.outputs.image }}
      image-tag: ${{ steps.build-image.outputs.tag }}
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up JDK for Docker build
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build and Push Docker Image
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          mvn clean package -DskipTests
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: Trigger Async Deployment
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deploy

      - name: Download current task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION \
            --region $AWS_REGION \
            --query taskDefinition > task-definition.json

      - name: Render updated task definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build-and-push.outputs.image-uri }}

      - name: Register new task definition
        id: register-task-def
        run: |
          RENDERED_FILE="${{ steps.render-task.outputs.task-definition }}"
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://$RENDERED_FILE \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task-definition-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Create appspec.yaml
        run: |
          cat > appspec.yaml <<EOF
          version: 0.0
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "${{ steps.register-task-def.outputs.task-definition-arn }}"
                  LoadBalancerInfo:
                    ContainerName: "${{ env.CONTAINER_NAME }}"
                    ContainerPort: 8000
                  PlatformVersion: "LATEST"
          EOF

      - name: Package and Upload to S3
        run: |
          zip deployment.zip appspec.yaml
          aws s3 cp deployment.zip s3://$S3_BUCKET/deployments/deployment-${{ github.sha }}.zip

      - name: Trigger Async CodeDeploy Deployment
        run: |
          DEPLOYMENT_ID=$(aws deploy create-deployment \
            --application-name $CODEDEPLOY_APPLICATION \
            --deployment-group-name $CODEDEPLOY_DEPLOYMENT_GROUP \
            --s3-location bucket=$S3_BUCKET,key=deployments/deployment-${{ github.sha }}.zip,bundleType=zip \
            --query deploymentId --output text)
          echo "Deployment triggered asynchronously with ID: $DEPLOYMENT_ID"
          echo "View deployment progress in AWS Console: https://$AWS_REGION.console.aws.amazon.com/codesuite/codedeploy/deployments/$DEPLOYMENT_ID?region=$AWS_REGION"

      # Optional: Quick verification that deployment was triggered
      - name: Verify Deployment Triggered
        run: |
          echo "Deployment was successfully triggered"
          echo "The deployment will continue running independently in AWS CodeDeploy"